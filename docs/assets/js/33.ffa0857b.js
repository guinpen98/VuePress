(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{377:function(t,a,r){"use strict";r.r(a);var e=r(13),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"プログラミングパラダイム"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#プログラミングパラダイム"}},[t._v("#")]),t._v(" プログラミングパラダイム")]),t._v(" "),a("h3",{attrs:{id:"目次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目次"}},[t._v("#")]),t._v(" 目次")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#はじめに"}},[t._v("はじめに")])]),a("li",[a("a",{attrs:{href:"#プログラミングパラダイムとは"}},[t._v("プログラミングパラダイムとは")])]),a("li",[a("a",{attrs:{href:"#構造化プログラミング"}},[t._v("構造化プログラミング")])]),a("li",[a("a",{attrs:{href:"#オブジェクト指向プログラミング"}},[t._v("オブジェクト指向プログラミング")])]),a("li",[a("a",{attrs:{href:"#関数型プログラミング"}},[t._v("関数型プログラミング")])]),a("li",[a("a",{attrs:{href:"#関連記事"}},[t._v("関連記事")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"はじめに"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#はじめに"}},[t._v("#")]),t._v(" はじめに")]),t._v(" "),a("p",[t._v("この記事は "),a("a",{attrs:{href:"https://www.kadokawa.co.jp/product/301806000678/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clean Architecture 達人に学ぶソフトウェアの構造と設計"),a("OutboundLink")],1),t._v("の第 2 部の内容を要約した内容となっています。")]),t._v(" "),a("h2",{attrs:{id:"プログラミングパラダイムとは"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#プログラミングパラダイムとは"}},[t._v("#")]),t._v(" プログラミングパラダイムとは")]),t._v(" "),a("blockquote",[a("p",[t._v("プログラミングパラダイムは、プログラマにプログラムの見方を与えるものと言える。例えばオブジェクト指向プログラミングでは、プログラムとはオブジェクトを作りそれを管理するもの。関数型言語では、状態を持たない関数の評価の連続。\n"),a("br"),t._v(" "),a("a",{attrs:{href:"https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%91%E3%83%A9%E3%83%80%E3%82%A4%E3%83%A0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia"),a("OutboundLink")],1),t._v(" より")])]),t._v(" "),a("p",[t._v("Wikipedia には多種のパラダイムが載っていますが、Clean Architecture では以下の 3 つのパラダイムについて説明しています。")]),t._v(" "),a("ul",[a("li",[t._v("構造化プログラミング")]),t._v(" "),a("li",[t._v("オブジェクト指向プログラミング")]),t._v(" "),a("li",[t._v("関数型プログラミング")])]),t._v(" "),a("h2",{attrs:{id:"構造化プログラミング"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#構造化プログラミング"}},[t._v("#")]),t._v(" 構造化プログラミング")]),t._v(" "),a("p",[t._v("構造化プログラミングは 1968 年に Edsger Wybe Dijkstra が発見しました。\nDijkstra は goto 文を使うと、モジュールを再帰的に小さな単位に分割出来なくなることにより「分割統治」が使えなくなることに気づき、goto 文は有害であると表明しました。")]),t._v(" "),a("p",[t._v("goto 文のフロー分岐やループ表現を、if 文の選択構文や while 文の反復構文に置き換える記法を制御構文と言い、構造化プログラミングは、順接、分岐、反復の三種の制御構造によって処理の流れを記述することと認識されています。")]),t._v(" "),a("p",[t._v("構造化プログラミングは、モジュールを再帰的に小さな単位に分割することによって、大きな問題は上位レベルの機能に分割し、さらに、下位レベルの機能に分割することが可能です。そうして得られた機能は、構造化プログラミングの制御構造を使って表現することができます。")]),t._v(" "),a("h2",{attrs:{id:"オブジェクト指向プログラミング"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#オブジェクト指向プログラミング"}},[t._v("#")]),t._v(" オブジェクト指向プログラミング")]),t._v(" "),a("p",[t._v("オブジェクト指向プログラミングは 1966 年に Ole Johan Dahl と Kristen Nygaard が発見しました。\nOO（オブジェクト指向）について書かれている文献では、"),a("strong",[t._v("カプセル化")]),t._v("、"),a("strong",[t._v("継承")]),t._v("、"),a("strong",[t._v("ポリモーフィズム")]),t._v("の三原則で OO の性質について説明していることもありますが、Clean Architecture ではポリモーフィズムの有用性について着目して、以下のように説明しています。")]),t._v(" "),a("blockquote",[a("p",[t._v("OO とは「ポリモーフィズムを使用することで、システムにあるすべてのソースコードの依存関係を絶対的に制御する能力」である。")])]),t._v(" "),a("h3",{attrs:{id:"依存関係逆転"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依存関係逆転"}},[t._v("#")]),t._v(" 依存関係逆転")]),t._v(" "),a("p",[t._v("ポリモーフィズムのような仕組みが用いられる前では、ソースコードの依存関係は制御の流れに従っていました。\nですが、インターフェイスを使うことによって、ソースコードの依存関係（継承関係）を逆転させることができます。\nこの内容は第 3 部の SOLID 原則の中の 1 つである依存関係の逆転の原則につながりがあります。")]),t._v(" "),a("h2",{attrs:{id:"関数型プログラミング"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#関数型プログラミング"}},[t._v("#")]),t._v(" 関数型プログラミング")]),t._v(" "),a("p",[t._v("関数型プログラミングは他の 2 つよりもずっと早い時期、コンピュータプログラミングよりも昔に発明されており、1930 年代に Alonzo Church が発明したラムダ計算にもとづいています。\n関数型言語で有名な言語は Haskell、LISP などがあります。")]),t._v(" "),a("h3",{attrs:{id:"参照透過性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参照透過性"}},[t._v("#")]),t._v(" 参照透過性")]),t._v(" "),a("blockquote",[a("p",[t._v("参照透過性（さんしょうとうかせい、英: Referential transparency）は、計算機言語の概念の一種である。ある式が参照透過であるとは、その式をその式の値に置き換えてもプログラムの振る舞いが変わらない（言い換えれば、同じ入力に対して同じ作用と同じ出力とを持つプログラムになる）ことを言う。具体的には変数の値は最初に定義した値と常に同じであり、関数は同じ変数を引数として与えられれば同じ値を返すということになる。\n"),a("br"),t._v(" "),a("a",{attrs:{href:"https://ja.wikipedia.org/wiki/%E5%8F%82%E7%85%A7%E9%80%8F%E9%81%8E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wikipedia"),a("OutboundLink")],1),t._v(" より")])]),t._v(" "),a("p",[t._v("関数型言語では参照透過性が成り立つものを、純粋関数型言語と呼んだりします。つまり、純粋関数型言語では再代入は禁止されています。")]),t._v(" "),a("p",[t._v("アーキテクチャの観点から考えると、変数の可変性の有無はとても重要です。変数の値が変化しなければ、並行処理のアプリケーションにおける問題は起こりません。")]),t._v(" "),a("h2",{attrs:{id:"関連記事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#関連記事"}},[t._v("#")]),t._v(" 関連記事")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/articles/Lisp.html"}},[t._v("Common Lisp を触る")])],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);