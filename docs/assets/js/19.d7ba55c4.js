(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{296:function(s,a,t){s.exports=t.p+"assets/img/1.df49cbaf.png"},373:function(s,a,t){"use strict";t.r(a);var r=t(13),n=Object(r.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"common-lisp-を触る"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-lisp-を触る"}},[s._v("#")]),s._v(" Common Lisp を触る")]),s._v(" "),a("h3",{attrs:{id:"目次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目次"}},[s._v("#")]),s._v(" 目次")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#はじめに"}},[s._v("はじめに")])]),a("li",[a("a",{attrs:{href:"#環境構築"}},[s._v("環境構築")])]),a("li",[a("a",{attrs:{href:"#lisp-を起動する"}},[s._v("Lisp を起動する")])]),a("li",[a("a",{attrs:{href:"#roswell-からスクリプトを実行する"}},[s._v("Roswell からスクリプトを実行する")])]),a("li",[a("a",{attrs:{href:"#データ構造"}},[s._v("データ構造")])]),a("li",[a("a",{attrs:{href:"#モード"}},[s._v("モード")])]),a("li",[a("a",{attrs:{href:"#関数定義と比較関数、四則演算など"}},[s._v("関数定義と比較関数、四則演算など")])]),a("li",[a("a",{attrs:{href:"#参考"}},[s._v("参考")])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"はじめに"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#はじめに"}},[s._v("#")]),s._v(" はじめに")]),s._v(" "),a("p",[s._v("この記事は Common Lisp で勉強した内容の備忘録です。\n大学の言語系の人工知能の講義の資料にあったコードが Lisp で書かれていて、それをきっかけに Lisp に興味を持ち、勉強してみることにしました。\nLisp には方言と呼ばれる、処理系が複数存在して、その中でも現在で広く使われている方言である Common Lisp を触っていきます。\nこの記事を書くにあたって、主に Land of Lisp を読んで勉強しました。\n環境は Windows です。")]),s._v(" "),a("h2",{attrs:{id:"環境構築"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#環境構築"}},[s._v("#")]),s._v(" 環境構築")]),s._v(" "),a("h3",{attrs:{id:"roswell-をインストール"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#roswell-をインストール"}},[s._v("#")]),s._v(" Roswell をインストール")]),s._v(" "),a("p",[s._v("Land of Lisp では CLISP をインストールしているのですが、筆者は Roswell から処理系をインストールしました。\n"),a("br"),s._v("\nCLISP インストーラのダウンロードは"),a("a",{attrs:{href:"https://clisp.sourceforge.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("こちら"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("Roswell は Common Lisp 環境のセットアップユーティリティです。\nLisp 処理系やライブラリのインストールのほかに、プログラムをコンパイルし、バイナルファイルにパッケージングすることもできるようです。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/roswell/roswell/wiki/Installation#windows",target:"_blank",rel:"noopener noreferrer"}},[s._v("Installation - roswell wiki"),a("OutboundLink")],1),s._v(" にインストール方法が載っています。")]),s._v(" "),a("p",[a("img",{attrs:{src:t(296),alt:"1"}})]),s._v(" "),a("p",[s._v("最新のリリースノートから、自分の環境にあったものをダウンロードし、Pathを通しました。")]),s._v(" "),a("h3",{attrs:{id:"セットアップ"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#セットアップ"}},[s._v("#")]),s._v(" セットアップ")]),s._v(" "),a("p",[s._v("以下のコマンドを叩いてセットアップします。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ros setup\n")])])]),a("p",[s._v("他の "),a("code",[s._v("ros")]),s._v(" コマンドを叩いても、処理系が不足している場合は、セットアップを行ってくれるようです。")]),s._v(" "),a("p",[s._v("Roswell のセットアップでは Steel Bank Common Lisp（SBCL）がインストールされます。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"lisp-を起動する"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lisp-を起動する"}},[s._v("#")]),s._v(" Lisp を起動する")]),s._v(" "),a("p",[s._v("コマンドで "),a("code",[s._v("ros run")]),s._v(" を打つと、デフォルトの処理系が起動します。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ros run\n*\n")])])]),a("p",[s._v("SBCL では「*」がプロンプトとなります。\n起動すると自動的に read-eval-print ループ（REPL）に入ります。")]),s._v(" "),a("blockquote",[a("p",[s._v("REPL (Read-Eval-Print Loop) とは、入力・評価・出力のループのこと。インタプリタにおいて、ユーザーとインタプリタが対話的にコード片を実行できるもの。")])]),s._v(" "),a("p",[s._v("と Wikipedia に書いてありました。\nREPL のことをインタプリタだと勘違いしていたのですが、インタプリタが一連のループを行うことを指すようです。")]),s._v(" "),a("p",[s._v("ここでは、Lisp コードを直にタイプすることができます。\n試しに足し算を行ってみます。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("ros run\n* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n*\n")])])]),a("p",[s._v("Lisp は 1+2 を (+ 1 2)のように関数を前に書く"),a("strong",[s._v("前置記法")]),s._v(" （prefix notation）です。\n私たちが使い慣れている、1+2 のような、引数と引数の間に演算子を置く記法は、"),a("strong",[s._v("中置記法")]),s._v("（infix notation）です。")]),s._v(" "),a("p",[s._v("終了するには以下のようにタイプします。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("* (quit)\n")])])]),a("h2",{attrs:{id:"roswell-からスクリプトを実行する"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#roswell-からスクリプトを実行する"}},[s._v("#")]),s._v(" Roswell からスクリプトを実行する")]),s._v(" "),a("p",[s._v("main 関数を作ると、Roswell からスクリプトを実行することができます。")]),s._v(" "),a("p",[s._v("Hello world! を表示するスクリプト「hello.lisp」を書きます。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token defun"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token arguments"}}),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("write-line")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("これを実行します。")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ros hello.lisp\nHello world!\n")])])]),a("p",[s._v("Hello world! が表示されました。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"データ構造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#データ構造"}},[s._v("#")]),s._v(" データ構造")]),s._v(" "),a("h3",{attrs:{id:"アトム"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#アトム"}},[s._v("#")]),s._v(" アトム")]),s._v(" "),a("p",[s._v("シンボルや数値、文字列などリストではないデータのことです。")]),s._v(" "),a("h3",{attrs:{id:"シンボル"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#シンボル"}},[s._v("#")]),s._v(" シンボル")]),s._v(" "),a("p",[s._v("シンボルは、Lisp の最も基本的なデータ型です。")]),s._v(" "),a("p",[s._v("Common Lisp のシンボルは大文字小文字を区別しません。\nシンボル同士の比較は eq で行います。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("eq")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'AAA")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'aaA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nT\n")])])]),a("h3",{attrs:{id:"数値"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数値"}},[s._v("#")]),s._v(" 数値")]),s._v(" "),a("p",[s._v("下記などの型があります。")]),s._v(" "),a("ul",[a("li",[s._v("整数")]),s._v(" "),a("li",[s._v("分数")]),s._v(" "),a("li",[s._v("少数")]),s._v(" "),a("li",[s._v("複素数")])]),s._v(" "),a("p",[s._v("整数どうしの除算では、少数ではなく分数で返ってきます。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n2/3\n")])])]),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.6666667")]),s._v("\n")])])]),a("h3",{attrs:{id:"文字列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文字列"}},[s._v("#")]),s._v(" 文字列")]),s._v(" "),a("p",[s._v("ダブルクオートでかこみます。文字列の表示には、princ を使います。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("princ")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nHello!\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello!"')]),s._v("\n")])])]),a("h3",{attrs:{id:"リスト"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#リスト"}},[s._v("#")]),s._v(" リスト")]),s._v(" "),a("p",[s._v("データを要素とする列型のデータのことで、"),a("code",[s._v("(A B C)")]),s._v(" のように括弧で要素を囲みます。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("list")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'b")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("A")]),s._v(" B C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("list 関数でリストを定義することができます。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("car")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("list")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'b")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nA\n* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("cdr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("list")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'b")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("B")]),s._v(" C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("car 関数を使うとリストの最初の要素を取り出すことができ、cdr 関数を使うとリストの残りの部分を取り出すことができます。")]),s._v(" "),a("h2",{attrs:{id:"モード"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#モード"}},[s._v("#")]),s._v(" モード")]),s._v(" "),a("p",[s._v("Coomon Lisp にはコードモードとデータモードという 2 つのモードがあります。")]),s._v(" "),a("h3",{attrs:{id:"コードモード"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#コードモード"}},[s._v("#")]),s._v(" コードモード")]),s._v(" "),a("p",[s._v("Lisp はデフォルトではコードモードになっています。")]),s._v(" "),a("p",[s._v("コードはフォームと呼ばれる構造のリストである必要があります。\nフォームとは先頭の要素がコマンド（多くの場合は関数名）であるリストのことです。\nフォームを読む際には、コマンドの後ろの要素は関数の引数として扱われます。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("expt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n")])])]),a("p",[s._v("上の例では 2 の 10 乗を計算しています。リストの最初の要素である、expt を読み取った際に累乗を計算するコマンドだと認識しています。残りの要素は関数の引数として渡されます。")]),s._v(" "),a("h3",{attrs:{id:"データモード"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#データモード"}},[s._v("#")]),s._v(" データモード")]),s._v(" "),a("p",[s._v("コードモードとは違い、データモードではコードはデータとして扱われ、コンピュータは実行しようとしません。")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("expt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("EXPT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("リストの前に '（シングルクオート）をつけることでデータモードになり、リストをデータとして扱います。この操作のことを「クオートする」とよびます。")]),s._v(" "),a("h2",{attrs:{id:"関数定義と比較関数、四則演算など"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#関数定義と比較関数、四則演算など"}},[s._v("#")]),s._v(" 関数定義と比較関数、四則演算など")]),s._v(" "),a("h3",{attrs:{id:"関数定義-defun"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#関数定義-defun"}},[s._v("#")]),s._v(" 関数定義 defun")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token defun"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print-hello")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token arguments"}}),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'Hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nPRINT-HELLO\n* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("print-hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nHELLO\nHELLO\n")])])]),a("h3",{attrs:{id:"四則演算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四則演算"}},[s._v("#")]),s._v(" 四則演算")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.0")]),s._v("\n")])])]),a("h3",{attrs:{id:"絶対値関数-abs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#絶対値関数-abs"}},[s._v("#")]),s._v(" 絶対値関数 abs")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("abs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("-3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])])]),a("h3",{attrs:{id:"比較関数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比較関数"}},[s._v("#")]),s._v(" 比較関数")]),s._v(" "),a("div",{staticClass:"language-lisp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lisp"}},[a("code",[s._v("* "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token car"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nNIL\n")])])]),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.oreilly.co.jp/books/9784873115870/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Land of Lisp"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://qiita.com/t-sin/items/054c2ff315ec3b9d3bdc",target:"_blank",rel:"noopener noreferrer"}},[s._v("いまから始めるCommon Lisp"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);