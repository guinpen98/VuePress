(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{290:function(s,t,a){s.exports=a.p+"assets/img/1.df49cbaf.png"},352:function(s,t,a){"use strict";a.r(t);var e=a(13),r=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"common-lisp-を触る"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#common-lisp-を触る"}},[s._v("#")]),s._v(" Common Lisp を触る")]),s._v(" "),t("h3",{attrs:{id:"目次"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目次"}},[s._v("#")]),s._v(" 目次")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#はじめに"}},[s._v("はじめに")])]),t("li",[t("a",{attrs:{href:"#環境構築"}},[s._v("環境構築")])]),t("li",[t("a",{attrs:{href:"#lisp-を起動する"}},[s._v("Lisp を起動する")])]),t("li",[t("a",{attrs:{href:"#roswell-からスクリプトを実行する"}},[s._v("Roswell からスクリプトを実行する")])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"はじめに"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#はじめに"}},[s._v("#")]),s._v(" はじめに")]),s._v(" "),t("p",[s._v("この記事は Common Lisp で勉強した内容の備忘録です。\n大学の言語系の人工知能の講義の資料にあったコードが Lisp で書かれていて、それをきっかけに Lisp に興味を持ち、勉強してみることにしました。\nLisp には方言と呼ばれる、処理系が複数存在して、その中でも現在で広く使われている方言である Common Lisp を触っていきます。\nこの記事を書くにあたって、主に Land of Lisp を読んで勉強しました。\n環境はWindowsです。")]),s._v(" "),t("h2",{attrs:{id:"環境構築"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#環境構築"}},[s._v("#")]),s._v(" 環境構築")]),s._v(" "),t("h3",{attrs:{id:"roswell-をインストール"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#roswell-をインストール"}},[s._v("#")]),s._v(" Roswell をインストール")]),s._v(" "),t("p",[s._v("Land of Lisp では CLISP をインストールしているのですが、筆者は Roswell から処理系をインストールしました。\n"),t("br"),s._v("\nCLISP インストーラのダウンロードは"),t("a",{attrs:{href:"https://clisp.sourceforge.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("こちら"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("Roswell は Common Lisp 環境のセットアップユーティリティです。\nLisp 処理系やライブラリのインストールのほかに、プログラムをコンパイルし、バイナルファイルにパッケージングすることもできるようです。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/roswell/roswell/wiki/Installation#windows",target:"_blank",rel:"noopener noreferrer"}},[s._v("Installation - roswell wiki"),t("OutboundLink")],1),s._v(" にインストール方法が載っています。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(290),alt:"1"}})]),s._v(" "),t("p",[s._v("最新のリリースノートから、自分の環境にあったものをダウンロードし、Pathを通しました。")]),s._v(" "),t("h3",{attrs:{id:"セットアップ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#セットアップ"}},[s._v("#")]),s._v(" セットアップ")]),s._v(" "),t("p",[s._v("以下のコマンドを叩いてセットアップします。、")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ros setup\n")])])]),t("p",[s._v("他の "),t("code",[s._v("ros")]),s._v(" コマンドを叩いても、処理系が不足している場合は、セットアップを行ってくれるようです。")]),s._v(" "),t("p",[s._v("Roswell のセットアップでは Steel Bank Common Lisp（SBCL）がインストールされます。")]),s._v(" "),t("h2",{attrs:{id:"lisp-を起動する"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lisp-を起動する"}},[s._v("#")]),s._v(" Lisp を起動する")]),s._v(" "),t("p",[s._v("コマンドで "),t("code",[s._v("ros run")]),s._v(" を打つと、デフォルトの処理系が起動します。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ros run\n*\n")])])]),t("p",[s._v("SBCL では「*」がプロンプトとなります。\n起動すると自動的に read-eval-print ループ（REPL）に入ります。")]),s._v(" "),t("blockquote",[t("p",[s._v("REPL (Read-Eval-Print Loop) とは、入力・評価・出力のループのこと。インタプリタにおいて、ユーザーとインタプリタが対話的にコード片を実行できるもの。")])]),s._v(" "),t("p",[s._v("と Wikipedia に書いてありました。\nREPL のことをインタプリタだと勘違いしていたのですが、インタプリタが一連のループを行うことを指すようです。")]),s._v(" "),t("p",[s._v("ここでは、Lisp コードを直にタイプすることができます。\n試しに足し算を行ってみます。")]),s._v(" "),t("div",{staticClass:"language-lisp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ros run\n* "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n*\n")])])]),t("p",[s._v("Lisp は 1+2 を (+ 1 2)のように関数を前に書く"),t("strong",[s._v("前置記法")]),s._v(" （prefix notation）です。\n私たちが使い慣れている、1+2 のような、引数と引数の間に演算子を置く記法は、"),t("strong",[s._v("中置記法")]),s._v("（infix notation）です。")]),s._v(" "),t("p",[s._v("終了するには以下のようにタイプします。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("* (quit)\n")])])]),t("h2",{attrs:{id:"roswell-からスクリプトを実行する"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#roswell-からスクリプトを実行する"}},[s._v("#")]),s._v(" Roswell からスクリプトを実行する")]),s._v(" "),t("p",[s._v("main 関数を作ると、Roswell からスクリプトを実行することができます。")]),s._v(" "),t("p",[s._v("Hello world! を表示するスクリプト「hello.lisp」を書きます。")]),s._v(" "),t("div",{staticClass:"language-lisp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}}),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("write-line")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("これを実行します。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ros hello.lisp\nHello world!\n")])])]),t("p",[s._v("Hello world! が表示されました。")])])}),[],!1,null,null,null);t.default=r.exports}}]);